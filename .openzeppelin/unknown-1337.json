{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xe90c18a990bb5f606A0270d3645FD7d277235437",
    "txHash": "0x6d12ce97299f33580fca0f7b8812bdedea0e2cd0d79bfa1cbfa6350663b28f5b"
  },
  "proxies": [
    {
      "address": "0xEA6bC9B66F9FBDe14b32fBb58f2d1E5Ec3189881",
      "txHash": "0x41c7f43b0f3931d370b19414bbcc359c652a74d871ab5a0a7b175f765557f682",
      "kind": "transparent"
    },
    {
      "address": "0x95b504c93FEd03C0E015677B1Eb5f468eb0f8dB7",
      "txHash": "0xefa4480d3706d9c40f9e5b9bb1c956d2270f427f3c5121fcc1f81b770a8d2a7c",
      "kind": "transparent"
    },
    {
      "address": "0x6240E7785432331e71885416e7114a54628EE196",
      "txHash": "0xd69053525fbba3f8cabc6a64a6d72ff883484f289cce2309fbee1befa23042bf",
      "kind": "transparent"
    },
    {
      "address": "0x5e9773EB820bF02Cc8D9D3d6271B68d49F2018DD",
      "txHash": "0x1cb545437275c14a2b5cc2eaf250d4d2a179113059f8452a8b49da40af4c0f52",
      "kind": "transparent"
    },
    {
      "address": "0x51EE592d5ed3d199651586e08d46C7B25EC7D33C",
      "txHash": "0x35c8617d843afaa04f97284339097cde8d974fcd3aac32f9f2bbb9cb5fe0745b",
      "kind": "transparent"
    }
  ],
  "impls": {
    "021483e61d7ec2aafb7913bec8d24affb707c4efcabbdb2942d9496d39d64e28": {
      "address": "0x33Bfa204605e12Df0E69417Af0dfc92Fc5280588",
      "txHash": "0x4e27b0e10afde0d51197dc111c9416c3c66184f46e1550deb9aa0116b606a79b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:310"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)558_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "Coin",
            "type": "t_contract(IERC20)2446",
            "src": "ERC20Wrapper.sol:21"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "factoryContract",
            "type": "t_address",
            "src": "ERC20Wrapper.sol:22"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "totalLiquidity",
            "type": "t_uint256",
            "src": "ERC20Wrapper.sol:23"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "usedLiquidity",
            "type": "t_uint256",
            "src": "ERC20Wrapper.sol:24"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "balanceSupplyCallPending",
            "type": "t_array(t_address)dyn_storage",
            "src": "ERC20Wrapper.sol:25"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "liquidityMapping",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "ERC20Wrapper.sol:26"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "borrowersMapping",
            "type": "t_mapping(t_address,t_struct(BorrowerDetails)27_storage)",
            "src": "ERC20Wrapper.sol:27"
          }
        ],
        "types": {
          "t_contract(IERC20)2446": {
            "label": "contract IERC20"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_struct(BorrowerDetails)27_storage)": {
            "label": "mapping(address => struct ERC20Wrapper.BorrowerDetails)"
          },
          "t_struct(BorrowerDetails)27_storage": {
            "label": "struct ERC20Wrapper.BorrowerDetails",
            "members": [
              {
                "label": "time",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)558_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)558_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "f2427398d347987418ecac3d0ba66075e65421ef1bff7fc6eee248505d6fd07b": {
      "address": "0x54E94928c54dCE390F168E9b4c696144022395CC",
      "txHash": "0x5ddd7055dd62d4bd7a55b78f7127e9aa78b69c924491b4b02eb85ef51d6d4c27",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:310"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)566_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "Coin",
            "type": "t_contract(IERC20)2454",
            "src": "ERC20Wrapper.sol:21"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "factoryContract",
            "type": "t_address",
            "src": "ERC20Wrapper.sol:22"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "totalLiquidity",
            "type": "t_uint256",
            "src": "ERC20Wrapper.sol:23"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "usedLiquidity",
            "type": "t_uint256",
            "src": "ERC20Wrapper.sol:24"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "balanceSupplyCallPending",
            "type": "t_array(t_address)dyn_storage",
            "src": "ERC20Wrapper.sol:25"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "liquidityMapping",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "ERC20Wrapper.sol:26"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "borrowersMapping",
            "type": "t_mapping(t_address,t_struct(BorrowerDetails)27_storage)",
            "src": "ERC20Wrapper.sol:27"
          }
        ],
        "types": {
          "t_contract(IERC20)2454": {
            "label": "contract IERC20"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_struct(BorrowerDetails)27_storage)": {
            "label": "mapping(address => struct ERC20Wrapper.BorrowerDetails)"
          },
          "t_struct(BorrowerDetails)27_storage": {
            "label": "struct ERC20Wrapper.BorrowerDetails",
            "members": [
              {
                "label": "time",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)566_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)566_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    },
    "5b587ba51c037aa95ebcdd12311d17a14b361f4bd5aacef8faaf5fdf9e6fd8d7": {
      "address": "0xdA31cdEB5fc37FB1f87135be77d0D585377Dfa27",
      "txHash": "0x5ab0b2da88892969a61b8134f291a42f23e30b62c91ac5116cbae04acd146e31",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:23"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:28"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "../@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:310"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:35"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)560_storage)",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:73"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:252"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "Coin",
            "type": "t_contract(IERC20)2448",
            "src": "ERC20Wrapper.sol:21"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "factoryContract",
            "type": "t_address",
            "src": "ERC20Wrapper.sol:22"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "totalLiquidity",
            "type": "t_uint256",
            "src": "ERC20Wrapper.sol:23"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "usedLiquidity",
            "type": "t_uint256",
            "src": "ERC20Wrapper.sol:24"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "balanceSupplyCallPending",
            "type": "t_array(t_address)dyn_storage",
            "src": "ERC20Wrapper.sol:25"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "liquidityMapping",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "ERC20Wrapper.sol:26"
          },
          {
            "contract": "ERC20Wrapper",
            "label": "borrowersMapping",
            "type": "t_mapping(t_address,t_struct(BorrowerDetails)27_storage)",
            "src": "ERC20Wrapper.sol:27"
          }
        ],
        "types": {
          "t_contract(IERC20)2448": {
            "label": "contract IERC20"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_struct(BorrowerDetails)27_storage)": {
            "label": "mapping(address => struct ERC20Wrapper.BorrowerDetails)"
          },
          "t_struct(BorrowerDetails)27_storage": {
            "label": "struct ERC20Wrapper.BorrowerDetails",
            "members": [
              {
                "label": "time",
                "type": "t_uint256"
              },
              {
                "label": "amount",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)560_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)560_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          }
        }
      }
    }
  }
}
